<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.eq.modules.bc.dao.BlockchainTxMapper">
    <resultMap id="BaseResultMap" type="org.eq.modules.bc.entity.BlockchainTx">
        <id column="id" jdbcType="BIGINT" property="id" />
        <result column="bc_error_code" jdbcType="VARCHAR" property="bcErrorCode" />
        <result column="bc_error_msg" jdbcType="VARCHAR" property="bcErrorMsg" />
        <result column="biz_type" jdbcType="INTEGER" property="bizType" />
        <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
	    <result column="tx_blob" jdbcType="VARCHAR" property="txBlob" />
	    <result column="tx_fee" jdbcType="VARCHAR" property="txFee" />
	    <result column="tx_hash" jdbcType="VARCHAR" property="txHash" />
	    <result column="tx_initiator_address" jdbcType="VARCHAR" property="txInitiatorAddress" />
	    <result column="tx_status" jdbcType="INTEGER" property="txStatus" />
	    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
    </resultMap>

    <sql id="Example_Where_Clause">
        <where>
            <foreach collection="oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>

    <sql id="Update_By_Example_Where_Clause">
        <where>
            <foreach collection="example.oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>

    <sql id="Base_Column_List">
        bc_error_code,bc_error_msg,biz_type,create_time,id,tx_blob,tx_fee,tx_hash,tx_initiator_address,tx_status,update_time
    </sql>

    <select id="selectByExample" parameterType="org.eq.modules.bc.entity.BlockchainTxExample" resultMap="BaseResultMap">
        select
        <if test="distinct">
            distinct
        </if>
        <include refid="Base_Column_List" />
        from blockchain_tx
        <if test="_parameter != null">
            <include refid="Example_Where_Clause" />
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
    </select>

    <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List" />
        from blockchain_tx
        where id = #{id,jdbcType=BIGINT}
    </select>

    <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
        delete from blockchain_tx
        where id = #{id,jdbcType=BIGINT}
    </delete>

    <delete id="deleteByExample" parameterType="org.eq.modules.bc.entity.BlockchainTxExample">
        delete from blockchain_tx
        <if test="_parameter != null">
            <include refid="Example_Where_Clause" />
        </if>
    </delete>

    <insert id="insert" parameterType="org.eq.modules.bc.entity.BlockchainTx">
        insert into blockchain_tx (bc_error_code,bc_error_msg,biz_type,create_time,tx_blob,tx_fee,tx_hash,tx_initiator_address,tx_status,update_time)
        values
        <trim prefix="(" suffix=")" suffixOverrides=",">
            #{bcErrorCode,jdbcType=VARCHAR},
            #{bcErrorMsg,jdbcType=VARCHAR},
            #{bizType,jdbcType=INTEGER},
            #{createTime,jdbcType=TIMESTAMP},
            #{txBlob,jdbcType=VARCHAR},
            #{txFee,jdbcType=VARCHAR},
            #{txHash,jdbcType=VARCHAR},
            #{txInitiatorAddress,jdbcType=VARCHAR},
            #{txStatus,jdbcType=INTEGER},
            #{updateTime,jdbcType=TIMESTAMP},
        </trim>
    </insert>

    <insert id="insertSelective" parameterType="org.eq.modules.bc.entity.BlockchainTx">
        insert into blockchain_tx
        <trim prefix="(" suffix=")" suffixOverrides=",">
            bc_error_code,
            bc_error_msg,
            biz_type,
            create_time,
            tx_blob,
            tx_fee,
            tx_hash,
            tx_initiator_address,
            tx_status,
            update_time,
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            #{bcErrorCode,jdbcType=VARCHAR},
            #{bcErrorMsg,jdbcType=VARCHAR},
            #{bizType,jdbcType=INTEGER},
            #{createTime,jdbcType=TIMESTAMP},
            #{txBlob,jdbcType=VARCHAR},
            #{txFee,jdbcType=VARCHAR},
            #{txHash,jdbcType=VARCHAR},
            #{txInitiatorAddress,jdbcType=VARCHAR},
            #{txStatus,jdbcType=INTEGER},
            #{updateTime,jdbcType=TIMESTAMP},
        </trim>
    </insert>

    <select id="countByExample" parameterType="org.eq.modules.bc.entity.BlockchainTxExample" resultType="java.lang.Long">
        select count(*) from blockchain_tx
        <if test="_parameter != null">
            <include refid="Example_Where_Clause" />
        </if>
    </select>

    <update id="updateByExampleSelective" parameterType="map">
        update blockchain_tx
        <set>
            <if test="record.bcErrorCode != null">
                bc_error_code = #{record.bcErrorCode,jdbcType=VARCHAR},
            </if>
            <if test="record.bcErrorMsg != null">
                bc_error_msg = #{record.bcErrorMsg,jdbcType=VARCHAR},
            </if>
            <if test="record.bizType != null">
                biz_type = #{record.bizType,jdbcType=INTEGER},
            </if>
            <if test="record.createTime != null">
                create_time = #{record.createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="record.id != null">
                id = #{record.id,jdbcType=BIGINT},
            </if>
            <if test="record.txBlob != null">
                tx_blob = #{record.txBlob,jdbcType=VARCHAR},
            </if>
            <if test="record.txFee != null">
                tx_fee = #{record.txFee,jdbcType=VARCHAR},
            </if>
            <if test="record.txHash != null">
                tx_hash = #{record.txHash,jdbcType=VARCHAR},
            </if>
            <if test="record.txInitiatorAddress != null">
                tx_initiator_address = #{record.txInitiatorAddress,jdbcType=VARCHAR},
            </if>
            <if test="record.txStatus != null">
                tx_status = #{record.txStatus,jdbcType=INTEGER},
            </if>
            <if test="record.updateTime != null">
                update_time = #{record.updateTime,jdbcType=TIMESTAMP},
            </if>
        </set>
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause" />
        </if>
    </update>

    <update id="updateByExample" parameterType="map">
        update blockchain_tx
        set
        <trim  suffixOverrides=",">
            bc_error_code = #{record.bcErrorCode,jdbcType=VARCHAR},
            bc_error_msg = #{record.bcErrorMsg,jdbcType=VARCHAR},
            biz_type = #{record.bizType,jdbcType=INTEGER},
            create_time = #{record.createTime,jdbcType=TIMESTAMP},
            id = #{record.id,jdbcType=BIGINT},
            tx_blob = #{record.txBlob,jdbcType=VARCHAR},
            tx_fee = #{record.txFee,jdbcType=VARCHAR},
            tx_hash = #{record.txHash,jdbcType=VARCHAR},
            tx_initiator_address = #{record.txInitiatorAddress,jdbcType=VARCHAR},
            tx_status = #{record.txStatus,jdbcType=INTEGER},
            update_time = #{record.updateTime,jdbcType=TIMESTAMP},
        </trim>
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause" />
        </if>
    </update>

    <update id="updateByPrimaryKeySelective" parameterType="org.eq.modules.bc.entity.BlockchainTx">
        update blockchain_tx
        <set>
            <if test="bcErrorCode != null">
            bc_error_code = #{bcErrorCode,jdbcType=VARCHAR},
            </if>
            <if test="bcErrorMsg != null">
            bc_error_msg = #{bcErrorMsg,jdbcType=VARCHAR},
            </if>
            <if test="bizType != null">
            biz_type = #{bizType,jdbcType=INTEGER},
            </if>
            <if test="createTime != null">
            create_time = #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="txBlob != null">
            tx_blob = #{txBlob,jdbcType=VARCHAR},
            </if>
            <if test="txFee != null">
            tx_fee = #{txFee,jdbcType=VARCHAR},
            </if>
            <if test="txHash != null">
            tx_hash = #{txHash,jdbcType=VARCHAR},
            </if>
            <if test="txInitiatorAddress != null">
            tx_initiator_address = #{txInitiatorAddress,jdbcType=VARCHAR},
            </if>
            <if test="txStatus != null">
            tx_status = #{txStatus,jdbcType=INTEGER},
            </if>
            <if test="updateTime != null">
            update_time = #{updateTime,jdbcType=TIMESTAMP},
            </if>
        </set>
        where id = #{id,jdbcType=BIGINT}
    </update>

    <update id="updateByPrimaryKey" parameterType="org.eq.modules.bc.entity.BlockchainTx">
        update blockchain_tx
        set
        <trim  suffixOverrides=",">
              bc_error_code = #{bcErrorCode,jdbcType=VARCHAR},
              bc_error_msg = #{bcErrorMsg,jdbcType=VARCHAR},
              biz_type = #{bizType,jdbcType=INTEGER},
              create_time = #{createTime,jdbcType=TIMESTAMP},
              tx_blob = #{txBlob,jdbcType=VARCHAR},
              tx_fee = #{txFee,jdbcType=VARCHAR},
              tx_hash = #{txHash,jdbcType=VARCHAR},
              tx_initiator_address = #{txInitiatorAddress,jdbcType=VARCHAR},
              tx_status = #{txStatus,jdbcType=INTEGER},
              update_time = #{updateTime,jdbcType=TIMESTAMP},
        </trim>
        where id = #{id,jdbcType=BIGINT}
    </update>

</mapper>