<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.eq.modules.auth.dao.UserAccountBindMapper">
    <resultMap id="BaseResultMap" type="org.eq.modules.auth.entity.UserAccountBind">
        <id column="id" jdbcType="BIGINT" property="id" />
	    <result column="type" jdbcType="TINYINT" property="type" />
	    <result column="user_id" jdbcType="BIGINT" property="userId" />
	    <result column="pay_login_id" jdbcType="VARCHAR" property="payLoginId" />
	    <result column="identity_no" jdbcType="VARCHAR" property="identityNo" />
	    <result column="create_date" jdbcType="TIMESTAMP" property="createDate" />
	    <result column="update_date" jdbcType="TIMESTAMP" property="updateDate" />
	    <result column="status" jdbcType="TINYINT" property="status" />
	    <result column="default_receip" jdbcType="TINYINT" property="defaultReceip" />
    </resultMap>

    <sql id="Example_Where_Clause">
        <where>
            <foreach collection="oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>

    <sql id="Update_By_Example_Where_Clause">
        <where>
            <foreach collection="example.oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>

    <sql id="Base_Column_List">
        id,type,user_id,pay_login_id,identity_no,create_date,update_date,status,default_receip
    </sql>

    <select id="selectByExample" parameterType="org.eq.modules.auth.entity.UserAccountBindExample" resultMap="BaseResultMap">
        select
        <if test="distinct">
            distinct
        </if>
        <include refid="Base_Column_List" />
        from user_account_bind
        <if test="_parameter != null">
            <include refid="Example_Where_Clause" />
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
    </select>

    <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List" />
        from user_account_bind
        where id = #{id,jdbcType=BIGINT}
    </select>

    <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
        delete from user_account_bind
        where id = #{id,jdbcType=BIGINT}
    </delete>

    <delete id="deleteByExample" parameterType="org.eq.modules.auth.entity.UserAccountBindExample">
        delete from user_account_bind
        <if test="_parameter != null">
            <include refid="Example_Where_Clause" />
        </if>
    </delete>

    <insert id="insert" parameterType="org.eq.modules.auth.entity.UserAccountBind">
        insert into user_account_bind (type,user_id,pay_login_id,identity_no,create_date,update_date,status,default_receip)
        values
        <trim prefix="(" suffix=")" suffixOverrides=",">
            #{type,jdbcType=TINYINT},
            #{userId,jdbcType=BIGINT},
            #{payLoginId,jdbcType=VARCHAR},
            #{identityNo,jdbcType=VARCHAR},
            #{createDate,jdbcType=TIMESTAMP},
            #{updateDate,jdbcType=TIMESTAMP},
            #{status,jdbcType=TINYINT},
            #{defaultReceip,jdbcType=TINYINT},
        </trim>
    </insert>

    <insert id="insertSelective" parameterType="org.eq.modules.auth.entity.UserAccountBind">
        insert into user_account_bind
        <trim prefix="(" suffix=")" suffixOverrides=",">
            type,
            user_id,
            pay_login_id,
            identity_no,
            create_date,
            update_date,
            status,
            default_receip,
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            #{type,jdbcType=TINYINT},
            #{userId,jdbcType=BIGINT},
            #{payLoginId,jdbcType=VARCHAR},
            #{identityNo,jdbcType=VARCHAR},
            #{createDate,jdbcType=TIMESTAMP},
            #{updateDate,jdbcType=TIMESTAMP},
            #{status,jdbcType=TINYINT},
            #{defaultReceip,jdbcType=TINYINT},
        </trim>
    </insert>

    <select id="countByExample" parameterType="org.eq.modules.auth.entity.UserAccountBindExample" resultType="java.lang.Long">
        select count(*) from user_account_bind
        <if test="_parameter != null">
            <include refid="Example_Where_Clause" />
        </if>
    </select>

    <update id="updateByExampleSelective" parameterType="map">
        update user_account_bind
        <set>
            <if test="record.id != null">
                id = #{record.id,jdbcType=BIGINT},
            </if>
            <if test="record.type != null">
                type = #{record.type,jdbcType=TINYINT},
            </if>
            <if test="record.userId != null">
                user_id = #{record.userId,jdbcType=BIGINT},
            </if>
            <if test="record.payLoginId != null">
                pay_login_id = #{record.payLoginId,jdbcType=VARCHAR},
            </if>
            <if test="record.identityNo != null">
                identity_no = #{record.identityNo,jdbcType=VARCHAR},
            </if>
            <if test="record.createDate != null">
                create_date = #{record.createDate,jdbcType=TIMESTAMP},
            </if>
            <if test="record.updateDate != null">
                update_date = #{record.updateDate,jdbcType=TIMESTAMP},
            </if>
            <if test="record.status != null">
                status = #{record.status,jdbcType=TINYINT},
            </if>
            <if test="record.defaultReceip != null">
                default_receip = #{record.defaultReceip,jdbcType=TINYINT},
            </if>
        </set>
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause" />
        </if>
    </update>

    <update id="updateByExample" parameterType="map">
        update user_account_bind
        set
        <trim  suffixOverrides=",">
            id = #{record.id,jdbcType=BIGINT},
            type = #{record.type,jdbcType=TINYINT},
            user_id = #{record.userId,jdbcType=BIGINT},
            pay_login_id = #{record.payLoginId,jdbcType=VARCHAR},
            identity_no = #{record.identityNo,jdbcType=VARCHAR},
            create_date = #{record.createDate,jdbcType=TIMESTAMP},
            update_date = #{record.updateDate,jdbcType=TIMESTAMP},
            status = #{record.status,jdbcType=TINYINT},
            default_receip = #{record.defaultReceip,jdbcType=TINYINT},
        </trim>
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause" />
        </if>
    </update>

    <update id="updateByPrimaryKeySelective" parameterType="org.eq.modules.auth.entity.UserAccountBind">
        update user_account_bind
        <set>
            <if test="type != null">
            type = #{type,jdbcType=TINYINT},
            </if>
            <if test="userId != null">
            user_id = #{userId,jdbcType=BIGINT},
            </if>
            <if test="payLoginId != null">
            pay_login_id = #{payLoginId,jdbcType=VARCHAR},
            </if>
            <if test="identityNo != null">
            identity_no = #{identityNo,jdbcType=VARCHAR},
            </if>
            <if test="createDate != null">
            create_date = #{createDate,jdbcType=TIMESTAMP},
            </if>
            <if test="updateDate != null">
            update_date = #{updateDate,jdbcType=TIMESTAMP},
            </if>
            <if test="status != null">
            status = #{status,jdbcType=TINYINT},
            </if>
            <if test="defaultReceip != null">
            default_receip = #{defaultReceip,jdbcType=TINYINT},
            </if>
        </set>
        where id = #{id,jdbcType=BIGINT}
    </update>

    <update id="updateByPrimaryKey" parameterType="org.eq.modules.auth.entity.UserAccountBind">
        update user_account_bind
        set
        <trim  suffixOverrides=",">
              type = #{type,jdbcType=TINYINT},
              user_id = #{userId,jdbcType=BIGINT},
              pay_login_id = #{payLoginId,jdbcType=VARCHAR},
              identity_no = #{identityNo,jdbcType=VARCHAR},
              create_date = #{createDate,jdbcType=TIMESTAMP},
              update_date = #{updateDate,jdbcType=TIMESTAMP},
              status = #{status,jdbcType=TINYINT},
              default_receip = #{defaultReceip,jdbcType=TINYINT},
        </trim>
        where id = #{id,jdbcType=BIGINT}
    </update>

</mapper>