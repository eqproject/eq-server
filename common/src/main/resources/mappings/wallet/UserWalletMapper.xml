<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.eq.modules.wallet.dao.UserWalletMapper">
    <resultMap id="BaseResultMap" type="org.eq.modules.wallet.entity.UserWallet">
	    <result column="user_id" jdbcType="BIGINT" property="userId" />
	    <result column="address" jdbcType="VARCHAR" property="address" />
	    <result column="create_date" jdbcType="TIMESTAMP" property="createDate" />
	    <result column="update_date" jdbcType="TIMESTAMP" property="updateDate" />
	    <result column="pubilc_key" jdbcType="VARCHAR" property="pubilcKey" />
	    <result column="key_store" jdbcType="VARCHAR" property="keyStore" />
	    <result column="status" jdbcType="INTEGER" property="status" />
	    <result column="tx_id" jdbcType="BIGINT" property="txId" />
    </resultMap>

    <sql id="Example_Where_Clause">
        <where>
            <foreach collection="oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>

    <sql id="Update_By_Example_Where_Clause">
        <where>
            <foreach collection="example.oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>

    <sql id="Base_Column_List">
        user_id,address,create_date,update_date,pubilc_key,key_store,status,tx_id
    </sql>

    <select id="selectByExample" parameterType="org.eq.modules.wallet.entity.UserWalletExample" resultMap="BaseResultMap">
        select
        <if test="distinct">
            distinct
        </if>
        <include refid="Base_Column_List" />
        from user_wallet
        <if test="_parameter != null">
            <include refid="Example_Where_Clause" />
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
    </select>

    <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List" />
        from user_wallet
        where user_id = #{id,jdbcType=BIGINT}
    </select>

    <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
        delete from user_wallet
        where id = #{id,jdbcType=BIGINT}
    </delete>

    <delete id="deleteByExample" parameterType="org.eq.modules.wallet.entity.UserWalletExample">
        delete from user_wallet
        <if test="_parameter != null">
            <include refid="Example_Where_Clause" />
        </if>
    </delete>

    <insert id="insert" parameterType="org.eq.modules.wallet.entity.UserWallet">
        insert into user_wallet (user_id,address,create_date,update_date,pubilc_key,key_store,status,tx_id)
        values
        <trim prefix="(" suffix=")" suffixOverrides=",">
            #{userId,jdbcType=BIGINT},
            #{address,jdbcType=VARCHAR},
            #{createDate,jdbcType=TIMESTAMP},
            #{updateDate,jdbcType=TIMESTAMP},
            #{pubilcKey,jdbcType=VARCHAR},
            #{keyStore,jdbcType=VARCHAR},
            #{status,jdbcType=INTEGER},
            #{txId,jdbcType=BIGINT},
        </trim>
    </insert>

    <insert id="insertReturnId" parameterType="org.eq.modules.wallet.entity.UserWallet" useGeneratedKeys="true" keyProperty="user_id">
        insert into user_wallet (user_id,address,create_date,update_date,pubilc_key,key_store,status,tx_id)
        values
        <trim prefix="(" suffix=")" suffixOverrides=",">
            #{userId,jdbcType=BIGINT},
            #{address,jdbcType=VARCHAR},
            #{createDate,jdbcType=TIMESTAMP},
            #{updateDate,jdbcType=TIMESTAMP},
            #{pubilcKey,jdbcType=VARCHAR},
            #{keyStore,jdbcType=VARCHAR},
            #{status,jdbcType=INTEGER},
            #{txId,jdbcType=BIGINT},
        </trim>
    </insert>

    <insert id="insertSelective" parameterType="org.eq.modules.wallet.entity.UserWallet">
        insert into user_wallet
        <trim prefix="(" suffix=")" suffixOverrides=",">
            user_id,
            address,
            create_date,
            update_date,
            pubilc_key,
            key_store,
            status,
            tx_id,
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            #{userId,jdbcType=BIGINT},
            #{address,jdbcType=VARCHAR},
            #{createDate,jdbcType=TIMESTAMP},
            #{updateDate,jdbcType=TIMESTAMP},
            #{pubilcKey,jdbcType=VARCHAR},
            #{keyStore,jdbcType=VARCHAR},
            #{status,jdbcType=INTEGER},
            #{txId,jdbcType=BIGINT},
        </trim>
    </insert>

    <select id="countByExample" parameterType="org.eq.modules.wallet.entity.UserWalletExample" resultType="java.lang.Long">
        select count(*) from user_wallet
        <if test="_parameter != null">
            <include refid="Example_Where_Clause" />
        </if>
    </select>

    <update id="updateByExampleSelective" parameterType="map">
        update user_wallet
        <set>
            <if test="record.userId != null">
                user_id = #{record.userId,jdbcType=BIGINT},
            </if>
            <if test="record.address != null">
                address = #{record.address,jdbcType=VARCHAR},
            </if>
            <if test="record.createDate != null">
                create_date = #{record.createDate,jdbcType=TIMESTAMP},
            </if>
            <if test="record.updateDate != null">
                update_date = #{record.updateDate,jdbcType=TIMESTAMP},
            </if>
            <if test="record.pubilcKey != null">
                pubilc_key = #{record.pubilcKey,jdbcType=VARCHAR},
            </if>
            <if test="record.keyStore != null">
                key_store = #{record.keyStore,jdbcType=VARCHAR},
            </if>
            <if test="record.status != null">
                status = #{record.status,jdbcType=INTEGER},
            </if>
            <if test="record.txId != null">
                tx_id = #{record.txId,jdbcType=BIGINT},
            </if>
        </set>
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause" />
        </if>
    </update>

    <update id="updateByExample" parameterType="map">
        update user_wallet
        set
        <trim  suffixOverrides=",">
            user_id = #{record.userId,jdbcType=BIGINT},
            address = #{record.address,jdbcType=VARCHAR},
            create_date = #{record.createDate,jdbcType=TIMESTAMP},
            update_date = #{record.updateDate,jdbcType=TIMESTAMP},
            pubilc_key = #{record.pubilcKey,jdbcType=VARCHAR},
            key_store = #{record.keyStore,jdbcType=VARCHAR},
            status = #{record.status,jdbcType=INTEGER},
            tx_id = #{record.txId,jdbcType=BIGINT},
        </trim>
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause" />
        </if>
    </update>

    <update id="updateByPrimaryKeySelective" parameterType="org.eq.modules.wallet.entity.UserWallet">
        update user_wallet
        <set>
            <if test="userId != null">
            user_id = #{userId,jdbcType=BIGINT},
            </if>
            <if test="address != null">
            address = #{address,jdbcType=VARCHAR},
            </if>
            <if test="createDate != null">
            create_date = #{createDate,jdbcType=TIMESTAMP},
            </if>
            <if test="updateDate != null">
            update_date = #{updateDate,jdbcType=TIMESTAMP},
            </if>
            <if test="pubilcKey != null">
            pubilc_key = #{pubilcKey,jdbcType=VARCHAR},
            </if>
            <if test="keyStore != null">
            key_store = #{keyStore,jdbcType=VARCHAR},
            </if>
            <if test="status != null">
            status = #{status,jdbcType=INTEGER},
            </if>
            <if test="txId != null">
            tx_id = #{txId,jdbcType=BIGINT},
            </if>
        </set>
        where id = #{id,jdbcType=BIGINT}
    </update>

    <update id="updateByPrimaryKey" parameterType="org.eq.modules.wallet.entity.UserWallet">
        update user_wallet
        set
        <trim  suffixOverrides=",">
              user_id = #{userId,jdbcType=BIGINT},
              address = #{address,jdbcType=VARCHAR},
              create_date = #{createDate,jdbcType=TIMESTAMP},
              update_date = #{updateDate,jdbcType=TIMESTAMP},
              pubilc_key = #{pubilcKey,jdbcType=VARCHAR},
              key_store = #{keyStore,jdbcType=VARCHAR},
              status = #{status,jdbcType=INTEGER},
              tx_id = #{txId,jdbcType=BIGINT},
        </trim>
        where id = #{id,jdbcType=BIGINT}
    </update>

</mapper>