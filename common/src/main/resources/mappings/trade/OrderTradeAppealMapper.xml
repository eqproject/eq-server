<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.eq.modules.trade.dao.OrderTradeAppealMapper">
    <resultMap id="BaseResultMap" type="org.eq.modules.trade.entity.OrderTradeAppeal">
        <id column="id" jdbcType="BIGINT" property="id" />
	    <result column="appeal_no" jdbcType="VARCHAR" property="appealNo" />
	    <result column="trade_no" jdbcType="VARCHAR" property="tradeNo" />
	    <result column="user_id" jdbcType="BIGINT" property="userId" />
	    <result column="status" jdbcType="TINYINT" property="status" />
	    <result column="crate_time" jdbcType="TIMESTAMP" property="crateTime" />
	    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
	    <result column="remark" jdbcType="VARCHAR" property="remark" />
        <result column="userNickName" jdbcType="VARCHAR" property="userNickName" />
        <result column="mobile" jdbcType="VARCHAR" property="mobile" />
    </resultMap>

    <sql id="Example_Where_Clause">
        <where>
            <foreach collection="oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>

    <sql id="Update_By_Example_Where_Clause">
        <where>
            <foreach collection="example.oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>

    <sql id="Base_Column_List">
        OT.id,OT.appeal_no,OT.trade_no,OT.user_id,OT.status,OT.crate_time,OT.update_time,OT.remark,
        UU.nickname AS userNickName, UU.mobile AS mobile
    </sql>

    <select id="selectByExample" parameterType="org.eq.modules.trade.entity.OrderTradeAppealExample" resultMap="BaseResultMap">
        select
        <if test="distinct">
            distinct
        </if>
        <include refid="Base_Column_List" />
        from order_trade_appeal OT left JOIN user UU ON  OT.user_id =UU.id
        <if test="_parameter != null">
            <include refid="Example_Where_Clause" />
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
    </select>

    <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List" />
        from order_trade_appeal OT left JOIN user UU ON  OT.user_id =UU.id
        where id = #{id,jdbcType=BIGINT}
    </select>

    <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
        delete from order_trade_appeal
        where id = #{id,jdbcType=BIGINT}
    </delete>

    <delete id="deleteByExample" parameterType="org.eq.modules.trade.entity.OrderTradeAppealExample">
        delete from order_trade_appeal
        <if test="_parameter != null">
            <include refid="Example_Where_Clause" />
        </if>
    </delete>

    <insert id="insert" parameterType="org.eq.modules.trade.entity.OrderTradeAppeal">
        insert into order_trade_appeal (appeal_no,trade_no,user_id,status,crate_time,update_time,remark)
        values
        <trim prefix="(" suffix=")" suffixOverrides=",">
            #{appealNo,jdbcType=VARCHAR},
            #{tradeNo,jdbcType=VARCHAR},
            #{userId,jdbcType=BIGINT},
            #{status,jdbcType=TINYINT},
            #{crateTime,jdbcType=TIMESTAMP},
            #{updateTime,jdbcType=TIMESTAMP},
            #{remark,jdbcType=VARCHAR},
        </trim>
    </insert>

    <insert id="insertSelective" parameterType="org.eq.modules.trade.entity.OrderTradeAppeal">
        insert into order_trade_appeal
        <trim prefix="(" suffix=")" suffixOverrides=",">
            appeal_no,
            trade_no,
            user_id,
            status,
            crate_time,
            update_time,
            remark,
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            #{appealNo,jdbcType=VARCHAR},
            #{tradeNo,jdbcType=VARCHAR},
            #{userId,jdbcType=BIGINT},
            #{status,jdbcType=TINYINT},
            #{crateTime,jdbcType=TIMESTAMP},
            #{updateTime,jdbcType=TIMESTAMP},
            #{remark,jdbcType=VARCHAR},
        </trim>
    </insert>

    <select id="countByExample" parameterType="org.eq.modules.trade.entity.OrderTradeAppealExample" resultType="java.lang.Long">
        select count(*) from order_trade_appeal
        <if test="_parameter != null">
            <include refid="Example_Where_Clause" />
        </if>
    </select>

    <update id="updateByExampleSelective" parameterType="map">
        update order_trade_appeal
        <set>
            <if test="record.id != null">
                id = #{record.id,jdbcType=BIGINT},
            </if>
            <if test="record.appealNo != null">
                appeal_no = #{record.appealNo,jdbcType=VARCHAR},
            </if>
            <if test="record.tradeNo != null">
                trade_no = #{record.tradeNo,jdbcType=VARCHAR},
            </if>
            <if test="record.userId != null">
                user_id = #{record.userId,jdbcType=BIGINT},
            </if>
            <if test="record.status != null">
                status = #{record.status,jdbcType=TINYINT},
            </if>
            <if test="record.crateTime != null">
                crate_time = #{record.crateTime,jdbcType=TIMESTAMP},
            </if>
            <if test="record.updateTime != null">
                update_time = #{record.updateTime,jdbcType=TIMESTAMP},
            </if>
            <if test="record.remark != null">
                remark = #{record.remark,jdbcType=VARCHAR},
            </if>
        </set>
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause" />
        </if>
    </update>

    <update id="updateByExample" parameterType="map">
        update order_trade_appeal
        set
        <trim  suffixOverrides=",">
            id = #{record.id,jdbcType=BIGINT},
            appeal_no = #{record.appealNo,jdbcType=VARCHAR},
            trade_no = #{record.tradeNo,jdbcType=VARCHAR},
            user_id = #{record.userId,jdbcType=BIGINT},
            status = #{record.status,jdbcType=TINYINT},
            crate_time = #{record.crateTime,jdbcType=TIMESTAMP},
            update_time = #{record.updateTime,jdbcType=TIMESTAMP},
            remark = #{record.remark,jdbcType=VARCHAR},
        </trim>
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause" />
        </if>
    </update>

    <update id="updateByPrimaryKeySelective" parameterType="org.eq.modules.trade.entity.OrderTradeAppeal">
        update order_trade_appeal
        <set>
            <if test="appealNo != null">
            appeal_no = #{appealNo,jdbcType=VARCHAR},
            </if>
            <if test="tradeNo != null">
            trade_no = #{tradeNo,jdbcType=VARCHAR},
            </if>
            <if test="userId != null">
            user_id = #{userId,jdbcType=BIGINT},
            </if>
            <if test="status != null">
            status = #{status,jdbcType=TINYINT},
            </if>
            <if test="crateTime != null">
            crate_time = #{crateTime,jdbcType=TIMESTAMP},
            </if>
            <if test="updateTime != null">
            update_time = #{updateTime,jdbcType=TIMESTAMP},
            </if>
            <if test="remark != null">
            remark = #{remark,jdbcType=VARCHAR},
            </if>
        </set>
        where id = #{id,jdbcType=BIGINT}
    </update>

    <update id="updateByPrimaryKey" parameterType="org.eq.modules.trade.entity.OrderTradeAppeal">
        update order_trade_appeal
        set
        <trim  suffixOverrides=",">
              appeal_no = #{appealNo,jdbcType=VARCHAR},
              trade_no = #{tradeNo,jdbcType=VARCHAR},
              user_id = #{userId,jdbcType=BIGINT},
              status = #{status,jdbcType=TINYINT},
              crate_time = #{crateTime,jdbcType=TIMESTAMP},
              update_time = #{updateTime,jdbcType=TIMESTAMP},
              remark = #{remark,jdbcType=VARCHAR},
        </trim>
        where id = #{id,jdbcType=BIGINT}
    </update>

</mapper>